#include "ros/ros.h"
#include "std_msgs/Bool.h"         //boolean data
#include "std_msgs/String.h"
#include "sensor_msgs/Range.h"     //ultrasonic sensor message
#include "geometry_msgs/Twist.h"   //cmd_vel
#include "std_msgs/Float32.h"
#include "nav_msgs/Odometry.h"

std_msgs::Bool flag_AEB;
std_msgs::Float32 delta_range;
std_msgs::Float32 current_val;        
std_msgs::Float32 old_sonar_range;
geometry_msgs::Twist cmd_vel_msg;  
geometry_msgs::Twist control_vel_msg;  


nav_msgs::Odometry estimated_odom;


#define kp 1.0
#define kd 15.0
#define dt 0.1

//float current_val;         
float error;
float prev_error;
float d_error;    
float kp_term, kd_term;
float aim = 2.0;
float control;

/*
void odomCallback(const nav_msgs::Odometry& msg)
{
	estimated_odom.twist.twist.angular.x= msg.twist.twist.angular.x;
	estimated_odom.twist.twist.angular.y= msg.twist.twist.angular.x;
	estimated_odom.twist.twist.angular.z= msg.twist.twist.angular.z;
	
	estimated_odom.twist.twist.linear.x= msg.twist.twist.linear.x;
	estimated_odom.twist.twist.linear.y= msg.twist.twist.linear.y;
	estimated_odom.twist.twist.linear.z= msg.twist.twist.linear.z;
}
*/
void UltraSonarCallback(const sensor_msgs::Range::ConstPtr&msg)
{
	ROS_INFO("Sonar Seq: [%d]", msg->header.seq);
	ROS_INFO("Sonar Range: [%f]", msg->range);
	
	if (msg->range < 4)
	{
		flag_AEB.data = true;
	}
	
	current_val.data = msg->range;

	/*
	error = (current_val - aim)/dt;
	kp_term = kp * error;
	
	d_error = (error - prev_error);
    kd_term = kd * d_error;
	
	prev_error = error;
	
	control = kp_term + kd_term;
	
	/*
	if(control > 0 )
    {
	   control_vel_msg.linear.x = control;
	}
	else
	{
		control_vel_msg.linear.x = 0;
    }
    */
	//control_vel_msg.linear.x = control;
}
/*
void UltraSonarCallback2(const sensor_msgs::Range::ConstPtr&msg)
{
	ROS_INFO("Sonar2 Seq: [%d]", msg->header.seq);
	ROS_INFO("Sonar2 Range: [%f]", msg->range);
}
*/

void CarControlCallback(const geometry_msgs::Twist&msg)   //teleop
{
	ROS_INFO("Cmd_vel : linear_x [%f]", msg.linear.x);
	

	cmd_vel_msg=msg;
	//ROS_INFO("Cmd_vel : linear_x [%f]", cmd_vel_msg.linear.x);
}

int main (int argc, char **argv)
{
	int count = 0;
	
	ros::init(argc, argv, "aeb_controller");
	
    ros::NodeHandle n;
	
	//std::string odom_sub_topic = "/ackermann_steering_controller/odom";
	
	ros::Subscriber sub = n. subscribe("/range",1000,UltraSonarCallback);
	//ros::Subscriber sonar_sub = n. subscribe("/RangeSonar1",1000,UltraSonarCallback2);
	ros::Subscriber cmd_vel_sub = n. subscribe("/cmd_vel",10,&CarControlCallback);
	//ros::Subscriber sub_odom = n.subscribe("odom_sub_topic", 10, &odomCallback);
	
	
	ros::Publisher pub_aeb_activation_flag = n.advertise<std_msgs::Bool>("/aeb_activation_flag",1);
	ros::Publisher pub_cmd_vel = n.advertise<geometry_msgs::Twist>("/ackermann_steering_controller/cmd_vel",10);
	//ros::Publisher pub_estimated_odom = n.advertise<nav_msgs::Odometry>("/estimated_odom",10);
	ros::Publisher pub_control_vel = n.advertise<geometry_msgs::Twist>("/ackermann_steering_controller/cmd_vel",10);
	
	ros::Rate loop_rate(10); 
	
	prev_error = cmd_vel_msg.linear.x;
	while (ros::ok())
	{
		if (flag_AEB.data == true)
		{
			error = (current_val.data - aim)/dt;
			kp_term = kp * error;
			
			d_error = (error - prev_error);
            kd_term = kd * d_error;
			
			prev_error = error;
	
	        control = kp_term + kd_term;
	        
	        control_vel_msg.linear.x = control;
			
			if(control > 0 )
            {
	            control_vel_msg.linear.x = control;
	        }
	        else
	        {
		        control_vel_msg.linear.x = 0;
            }
			pub_control_vel.publish(control_vel_msg);
		}
		else
	    {
			pub_cmd_vel.publish(cmd_vel_msg);
		}
		
		//pub_cmd_vel.publish(cmd_vel_msg);
		//pub_control_vel.publish(control_vel_msg);
		
		
		
		loop_rate.sleep();
		ros::spinOnce();
		++count;
	}
	return 0;
} 
